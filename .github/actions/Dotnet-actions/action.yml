name: Reusable Dotnet Workflow

inputs:
  command:
    required: true
    type: string
  projects:
    required: true
    type: string
  arguments:
    required: false
    type: string
  solution:
    required: false
    type: string
  configuration: 
    required: true
    type: string

runs:
  using: 'composite'  
  steps:
    # Validate Solution Path (if provided)
    - name: Validate Solution Path
      shell: pwsh
      run: |
        if (${{ inputs.solution }} -and !(Test-Path "${{ inputs.solution }}")) {
          Write-Error "Solution file not found at path: ${{ inputs.solution }}"
          exit 1
        }

    # Resolve Project Files from Glob Pattern
    - name: Resolve Project Files
      id: resolve-projects
      shell: pwsh
      run: |
        $projects = Get-ChildItem -Path . -Recurse -Include ${{ inputs.projects }} -File | ForEach-Object { $_.FullName }
        if (-not $projects) {
          Write-Error "No project files found matching the pattern: ${{ inputs.projects }}"
          exit 1
        }
        $projects -join "`n" | Out-File -FilePath resolved_projects.txt
      continue-on-error: false

    # Restore Dependencies using Solution or Projects
    - name: Restore Dependencies
      shell: pwsh
      run: |
        if (${{ inputs.solution }} -and (Test-Path "${{ inputs.solution }}")) {
          # Restore using the solution file
          dotnet restore ${{ inputs.solution }}
        } else {
          # Restore using resolved project files
          Get-Content resolved_projects.txt | ForEach-Object { dotnet restore $_ }
        }

    # Build the project or solution
    - name: Build
      shell: pwsh
      run: |
        if (${{ inputs.solution }} -and (Test-Path "${{ inputs.solution }}")) {
          dotnet build ${{ inputs.solution }} --configuration ${{ inputs.configuration }} ${{ inputs.arguments }}
        } else {
          Get-Content resolved_projects.txt | ForEach-Object { dotnet build $_ --configuration ${{ inputs.configuration }} ${{ inputs.arguments }} }
        }

    # Test the project or solution
    - name: Test
      shell: pwsh
      run: |
        if (${{ inputs.solution }} -and (Test-Path "${{ inputs.solution }}")) {
          dotnet test ${{ inputs.solution }} --configuration ${{ inputs.configuration }} ${{ inputs.arguments }}
        } else {
          Get-Content resolved_projects.txt | ForEach-Object { dotnet test $_ --configuration ${{ inputs.configuration }} ${{ inputs.arguments }} }
        }

    # Pack the project or solution
    - name: Pack
      shell: pwsh
      run: |
        if (${{ inputs.solution }} -and (Test-Path "${{ inputs.solution }}")) {
          dotnet pack ${{ inputs.solution }} --configuration ${{ inputs.configuration }} ${{ inputs.arguments }}
        } else {
          Get-Content resolved_projects.txt | ForEach-Object { dotnet pack $_ --configuration ${{ inputs.configuration }} ${{ inputs.arguments }} }
        }

    # Publish the project or solution
    - name: Publish
      shell: pwsh
      run: |
        if (${{ inputs.solution }} -and (Test-Path "${{ inputs.solution }}")) {
          dotnet publish ${{ inputs.solution }} --configuration ${{ inputs.configuration }} ${{ inputs.arguments }}
        } else {
          Get-Content resolved_projects.txt | ForEach-Object { dotnet publish $_ --configuration ${{ inputs.configuration }} ${{ inputs.arguments }} }
        }
