workflow:

name: Reusable Dotnet Workflow

inputs:
  command:
    required: true
    type: string
  projects:
    required: true
    type: string
  arguments:
    required: false
    type: string
  restoreArguments:
    required: false
    type: string
  nugetConfigPath:
    required: true
    type: string
  noCache:
    required: false
    type: boolean
  packagesDirectory:
    required: true
    type: string
  nuGetPath:
    required: true
    type: string
  nuGetVersion:
    required: true
    type: string
  solution:
    required: true
    type: string
  configuration: 
    required: true
    type: string

runs:
  using: 'composite'  
  steps:
  
    - name: Validate nuget.config Path
      shell: pwsh
      run: |
        if (!(Test-Path "${{ inputs.nugetConfigPath }}")) {
          Write-Error "nuget.config file not found at path: ${{ inputs.nugetConfigPath }}"
          exit 1
        } 

    - name: Restore NuGet Packages
      shell: pwsh
      run: |
        if (!(Test-Path "${{ inputs.solution }}")) {
          Write-Error "Solution file not found at path: ${{ inputs.solution }}"
          exit 1
        }
        & "${{ inputs.nuGetPath }}" restore "${{ inputs.solution }}" `
          -ConfigFile "${{ inputs.nugetConfigPath }}" `
          -PackagesDirectory "${{ inputs.packagesDirectory }}" `
          -NonInteractive `
          ${{ inputs.restoreArguments }}

    - name: Build
      shell: pwsh
      run: |
        dotnet build ${{ inputs.solution }} --configuration ${{ inputs.configuration }} ${{ inputs.arguments }}

    - name: Test
      shell: pwsh
      run: |
        $testCommand = "dotnet test `"$projects`""
        if ($arguments) { $testCommand += " $arguments" }
        Write-Host "Executing: $testCommand"
        Invoke-Expression $testCommand

    - name: Pack
      shell: pwsh
      run: |
        $packCommand = "dotnet pack `"$projects`""
        if ($arguments) { $packCommand += " $arguments" }
        Write-Host "Executing: $packCommand"
        Invoke-Expression $packCommand

    - name: Publish
      shell: pwsh
      run: |
        $publishCommand = "dotnet publish `"$projects`""
        if ($arguments) { $publishCommand += " $arguments" }
        Write-Host "Executing: $publishCommand"
        Invoke-Expression $publishCommand
